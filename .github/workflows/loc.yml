name: Total LOC Counter

on:
  schedule:
    - cron: '0 0 * * *'  # Daily
  workflow_dispatch:

permissions:
  contents: write

jobs:
  count-loc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          persist-credentials: false  # Important: set to false when using token

      - name: Verify token is available
        run: |
          if [ -z "${{ secrets.PERSONAL_TOKEN }}" ]; then
            echo "::error::PERSONAL_TOKEN secret is missing or empty"
            exit 1
          else
            echo "‚úÖ Token is available"
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq cloc curl
          
          # Install tokei - fixed method
          curl -sSL https://github.com/XAMPPRocky/tokei/releases/latest/download/tokei-x86_64-unknown-linux-gnu.tar.gz -o tokei.tar.gz
          tar xzf tokei.tar.gz
          sudo mv tokei /usr/local/bin/
          rm tokei.tar.gz
          
          echo "‚úÖ Tokei version: $(tokei --version)"

      - name: Fetch repositories
        id: fetch-repos
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          echo "üîç Fetching repositories for user: ${{ github.repository_owner }}"
          
          # Get repositories using GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/users/${{ github.repository_owner }}/repos?per_page=3&sort=updated")
          
          # Extract clone URLs
          REPOS=$(echo "$response" | jq -r '.[].clone_url')
          
          echo "üìÇ Repositories to process:"
          echo "$REPOS"
          
          # Store in environment for next steps
          echo "REPOS<<EOF" >> $GITHUB_ENV
          echo "$REPOS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Count lines of code
        id: count-loc
        env:
          REPOS: ${{ env.REPOS }}
        run: |
          echo "üî¢ Starting LOC count..."
          TOTAL_LOC=0
          COUNT=0
          
          # Check if we have repositories
          if [ -z "$REPOS" ]; then
            echo "‚ùå No repositories found to process"
            exit 1
          fi
          
          for REPO in $REPOS; do
            ((COUNT++))
            REPO_NAME=$(basename "$REPO" .git)
            echo "üìÅ Processing $COUNT: $REPO_NAME"
            
            # Clone with authentication
            if git clone --quiet --depth 1 "$REPO" "temp_repo_$COUNT" 2>/dev/null; then
              cd "temp_repo_$COUNT"
              
              # Try tokei first
              LOC_TOKEI=$(tokei -t=All --output json | jq '.total.code // 0') || LOC_TOKEI=0
              
              # Fallback to cloc
              LOC_CLOC=$(cloc . --json --quiet 2>/dev/null | jq '.SUM.code // 0') || LOC_CLOC=0
              
              echo "   Tokei: $LOC_TOKEI | CLOC: $LOC_CLOC"
              
              # Use the larger count (usually more accurate)
              if [ "$LOC_CLOC" -gt "$LOC_TOKEI" ]; then
                LOC=$LOC_CLOC
              else
                LOC=$LOC_TOKEI
              fi
              
              TOTAL_LOC=$((TOTAL_LOC + LOC))
              echo "   ‚úÖ $REPO_NAME: $LOC lines"
              cd ..
              rm -rf "temp_repo_$COUNT"
            else
              echo "   ‚ùå Failed to clone $REPO_NAME"
            fi
          done
          
          echo "üìä Total LOC across $COUNT repositories: $TOTAL_LOC"
          echo "TOTAL_LOC=$TOTAL_LOC" >> $GITHUB_ENV

      - name: Update README with LOC badge
        if: env.TOTAL_LOC != '0' && env.TOTAL_LOC != ''
        env:
          TOTAL_LOC: ${{ env.TOTAL_LOC }}
        run: |
          echo "üìù Updating README with $TOTAL_LOC lines of code..."
          
          # Format number with commas
          FORMATTED_LOC=$(printf "%'d" $TOTAL_LOC)
          
          # Create badge URL
          BADGE_URL="https://img.shields.io/badge/Total%20Code-$FORMATTED_LOC%20lines-8A2BE2?style=for-the-badge&logo=visual-studio-code&logoColor=white"
          
          # Check if LOC section exists in README
          if grep -q "Total Code" README.md; then
            echo "üîÑ Updating existing LOC badge..."
            sed -i "s|https://img.shields.io/badge/Total%20Code-[^)]*|$BADGE_URL|g" README.md
          else
            echo "‚ûï Adding new LOC section to README..."
            echo -e "\n## üìä Development Metrics\n\n![Total Code]($BADGE_URL)" >> README.md
          fi
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit and push changes
          git add README.md
          if git diff --staged --quiet; then
            echo "‚úÖ No changes needed"
          else
            git commit -m "üìà Update LOC: $FORMATTED_LOC lines"
            git push
            echo "‚úÖ README updated successfully!"
          fi