name: Total LOC Counter

on:
  schedule:
    - cron: '0 0 * * *'  # Daily
  workflow_dispatch:

permissions:
  contents: write

jobs:
  count-loc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq cloc curl
          
          echo "üîß Installing code analysis tools..."
          
          # Install tokei - direct binary method
          echo "üì• Downloading tokei..."
          TOKEI_URL="https://github.com/XAMPPRocky/tokei/releases/latest/download/tokei-x86_64-unknown-linux-gnu"
          if curl -sSL -o tokei "$TOKEI_URL"; then
            chmod +x tokei
            sudo mv tokei /usr/local/bin/
            echo "‚úÖ Tokei installed successfully"
          else
            echo "‚ùå Tokei download failed - will use cloc only"
          fi
          
          # Verify tools
          echo "üìã Installed tools:"
          command -v jq && echo "  ‚úÖ jq"
          command -v cloc && echo "  ‚úÖ cloc" 
          command -v tokei && echo "  ‚úÖ tokei"

      - name: Fetch repositories
        id: fetch-repos
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          echo "üîç Fetching repositories for: ${{ github.repository_owner }}"
          
          # Get repositories using GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/users/${{ github.repository_owner }}/repos?per_page=3&sort=updated")
          
          # Extract clone URLs
          REPOS=$(echo "$response" | jq -r '.[].clone_url // empty')
          
          if [ -z "$REPOS" ]; then
            echo "‚ùå No repositories found or API call failed"
            echo "API Response: $response"
            exit 1
          fi
          
          echo "üìÇ Found repositories:"
          echo "$REPOS"
          echo "REPOS<<EOF" >> $GITHUB_ENV
          echo "$REPOS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Count lines of code
        id: count-loc
        env:
          REPOS: ${{ env.REPOS }}
        run: |
          echo "üî¢ Starting LOC count..."
          TOTAL_LOC=0
          COUNT=0
          
          for REPO in $REPOS; do
            ((COUNT++))
            REPO_NAME=$(basename "$REPO" .git)
            echo "üìÅ Processing $COUNT: $REPO_NAME"
            
            # Clone repository
            if git clone --quiet --depth 1 "$REPO" "temp_repo_$COUNT" 2>/dev/null; then
              cd "temp_repo_$COUNT"
              
              # Try tokei if available, otherwise use cloc
              if command -v tokei &> /dev/null; then
                LOC=$(tokei -t=All --output json | jq '.total.code // 0') || LOC=0
                echo "   üìä (tokei): $LOC lines"
              else
                LOC=$(cloc . --json --quiet 2>/dev/null | jq '.SUM.code // 0') || LOC=0
                echo "   üìä (cloc): $LOC lines"
              fi
              
              TOTAL_LOC=$((TOTAL_LOC + LOC))
              cd ..
              rm -rf "temp_repo_$COUNT"
            else
              echo "   ‚ùå Failed to clone $REPO_NAME"
            fi
          done
          
          echo "üìà Total LOC across $COUNT repositories: $TOTAL_LOC"
          echo "TOTAL_LOC=$TOTAL_LOC" >> $GITHUB_ENV

      - name: Update README with LOC badge
        if: env.TOTAL_LOC != '0' && env.TOTAL_LOC != ''
        env:
          TOTAL_LOC: ${{ env.TOTAL_LOC }}
        run: |
          echo "üìù Updating README with $TOTAL_LOC lines..."
          
          # Format number
          FORMATTED_LOC=$(printf "%'d" $TOTAL_LOC)
          BADGE_URL="https://img.shields.io/badge/Total%20Code-$FORMATTED_LOC%20lines-8A2BE2?style=for-the-badge&logo=visual-studio-code&logoColor=white"
          
          # Update or add LOC section
          if grep -q "Total Code" README.md; then
            sed -i "s|https://img.shields.io/badge/Total%20Code-[^)]*|$BADGE_URL|g" README.md
          else
            echo -e "\n## üìä Development Metrics\n\n![Total Code]($BADGE_URL)" >> README.md
          fi
          
          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          
          if ! git diff --staged --quiet; then
            git commit -m "üìà Update LOC: $FORMATTED_LOC lines"
            git push
            echo "‚úÖ README updated successfully!"
          else
            echo "‚úÖ No changes needed"
          fi