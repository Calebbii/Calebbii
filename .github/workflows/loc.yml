name: Total LOC Counter

on:
  schedule:
    - cron: '0 0 * * *'  # Daily
  workflow_dispatch:

permissions:
  contents: write

jobs:
  count-loc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN_1 }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq cloc curl
          
          # Install tokei - fixed method
          curl -sL https://github.com/XAMPPRocky/tokei/releases/latest/download/tokei-x86_64-unknown-linux-gnu.tar.gz -o tokei.tar.gz
          tar xzf tokei.tar.gz
          sudo mv tokei /usr/local/bin/
          rm tokei.tar.gz
          
          echo "‚úÖ Dependencies installed successfully"

      - name: Get repository list
        id: get-repos
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN_1 }}
        run: |
          # Use GitHub API directly
          repos_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/users/${{ github.repository_owner }}/repos?per_page=3&sort=updated")
          
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          echo "$repos_json" | jq -r '.[].clone_url' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Found repositories:"
          echo "$repos_json" | jq -r '.[].name'

      - name: Count lines of code
        id: count-loc
        env:
          REPOS: ${{ steps.get-repos.outputs.repos }}
        run: |
          echo "Starting LOC count..."
          TOTAL_LOC=0
          COUNT=0
          
          while IFS= read -r repo; do
            [[ -z "$repo" ]] && continue
            ((COUNT++))
            repo_name=$(basename "$repo" .git)
            echo "üìÅ Processing $COUNT: $repo_name"
            
            # Clone repository
            if git clone --quiet --depth 1 "$repo" "temp_repo_$COUNT" 2>/dev/null; then
              cd "temp_repo_$COUNT"
              
              # Count lines with tokei
              loc=$(tokei -t=All --output json | jq '.total.code // 0') || loc=0
              
              # Fallback to cloc if tokei fails
              if [[ "$loc" -eq 0 || "$loc" == "null" ]]; then
                loc=$(cloc . --json --quiet 2>/dev/null | jq '.SUM.code // 0') || loc=0
              fi
              
              echo "   üìä $repo_name: $loc lines"
              TOTAL_LOC=$((TOTAL_LOC + loc))
              cd ..
              rm -rf "temp_repo_$COUNT"
            else
              echo "   ‚ùå Failed to clone $repo_name"
            fi
          done <<< "$REPOS"
          
          echo "Total LOC across $COUNT repositories: $TOTAL_LOC"
          echo "TOTAL_LOC=$TOTAL_LOC" >> $GITHUB_ENV

      - name: Update README with LOC badge
        if: env.TOTAL_LOC != '0' && env.TOTAL_LOC != ''
        env:
          TOTAL_LOC: ${{ env.TOTAL_LOC }}
        run: |
          echo "Updating README with $TOTAL_LOC lines of code..."
          
          # Format the number with commas
          FORMATTED_LOC=$(printf "%'d" $TOTAL_LOC)
          
          # Create badge URL
          BADGE_URL="https://img.shields.io/badge/Total%20Code-$FORMATTED_LOC%20lines-8A2BE2?style=for-the-badge&logo=visual-studio-code&logoColor=white"
          
          # Update README - first check if section exists
          if grep -q "Total Code" README.md; then
            sed -i "s|https://img.shields.io/badge/Total%20Code-[^)]*|$BADGE_URL|g" README.md
          else
            # Add new section
            echo "" >> README.md
            echo "## üìä Development Metrics" >> README.md
            echo "" >> README.md
            echo "![Total Code]($BADGE_URL)" >> README.md
          fi
          
          # Configure git and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          
          if ! git diff --staged --quiet; then
            git commit -m "üìà Update LOC: $FORMATTED_LOC lines"
            git push
            echo "‚úÖ README updated successfully!"
          else
            echo "‚úÖ No changes needed"
          fi